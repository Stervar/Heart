# Импорт необходимых библиотек
import numpy as np  # Библиотека для численных вычислений и работы с многомерными массивами
import matplotlib.pyplot as plt  # Библиотека для создания статических, анимированных и интерактивных визуализаций
from matplotlib.animation import FuncAnimation  # Класс для создания анимации

def heart_curve(t):
    """
    Функция генерации точек кривой сердца
    
    Параметры:
    - t: параметрический массив углов от 0 до 2π
    
    Возвращает:
    - x: массив x-координат сердца
    - y: массив y-координат сердца
    """
    # Параметрические уравнения сердца
    # Математическая формула, создающая контур сердца
    x = 16 * np.sin(t)**3  # X-координата
    y = 13 * np.cos(t) - 5 * np.cos(2*t) - 2 * np.cos(3*t) - np.cos(4*t)  # Y-координата
    
    return x, y

def rotate_heart(t, angle):
    """
    Функция поворота сердца на заданный угол
    
    Параметры:
    - t: параметрический массив углов от 0 до 2π
    - angle: угол поворота
    
    Возвращает:
    - rotated[:, 0]: повернутые x-координаты
    - rotated[:, 1]: повернутые y-координаты
    """
    # Получаем исходные координаты сердца
    x, y = heart_curve(t)
    
    # Создаем матрицу поворота
    # Матрица поворота для 2D пространства
    rotation_matrix = np.array([
        [np.cos(angle), -np.sin(angle)],  # Первая строка матрицы поворота
        [np.sin(angle), np.cos(angle)]    # Вторая строка матрицы поворота
    ])
    
    # Применяем поворот
    # Объединяем координаты в матрицу и умножаем на транспонированную матрицу поворота
    rotated = np.dot(np.column_stack([x, y]), rotation_matrix.T)
    
    return rotated[:, 0], rotated[:, 1]

def animate(frame):
    """
    Функция анимации для каждого кадра
    
    Параметр:
    - frame: номер текущего кадра
    """
    # Очистка текущего графика
    plt.clf()
    
    # Создание параметрического массива углов
    # 200 точек для гладкости кривой
    t = np.linspace(0, 2*np.pi, 200)
    
    # Вращение сердца
    # Угол поворота зависит от номера кадра
    x, y = rotate_heart(t, frame/10)
    
    # Построение кривой сердца
    plt.plot(x, y, color='red')  # Красный цвет линии
    
    # Настройка параметров графика
    plt.title('Вращающееся сердце')  # Заголовок
    plt.xlabel('X')  # Подпись оси X
    plt.ylabel('Y')  # Подпись оси Y
    plt.axis('equal')  # Одинаковый масштаб осей
    plt.grid(True)  # Включение сетки

# Создание графического окна
fig = plt.figure(figsize=(8, 6))  # Размер окна 8x6 дюймов

# Создание анимации
anim = FuncAnimation(
    fig,                                     # Фигура для анимации
    animate,                                 # Функция анимации
    frames=np.linspace(0, 2*np.pi, 100),     # Кадры (углы поворота)
    interval=50,                             # Интервал между кадрами (мс)
    repeat=True                              # Повторение анимации
)

# Отображение анимации
plt.show()